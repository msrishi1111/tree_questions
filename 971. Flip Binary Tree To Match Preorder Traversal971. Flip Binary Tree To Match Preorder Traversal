Basically, we check if the node value matches with the current index in the voyage. If it's matched, then we check if the left child's val matches with the next voyage's value or not. If it is not then the only possibility is to check if swap works here or not. If it works, then we add them to the output. Else, we return -1

 vector<int> res;
    int i = 0;
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& v) {
        return dfs(root, v) ? res : vector<int>{-1};
    }

    bool dfs(TreeNode* node, vector<int>& v) {
        if (!node) return true;
        if (node->val != v[i++]) return false;
        if (node->left && node->left->val != v[i]) {
            res.push_back(node->val);
            return dfs(node->right, v) && dfs(node->left, v);
        }
        return dfs(node->left, v) && dfs(node->right, v);
    }
